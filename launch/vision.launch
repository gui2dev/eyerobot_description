
<launch>
   
    <node pkg="tf" type="static_transform_publisher" name="base_to_laser"
      args="0 0 0 1.57070963 0.0 0.0 /base_link /laser 100" />

    <node pkg="tf" type="static_transform_publisher" name="base_to_nav"
      args="0 0 0 0.0 0 0.0 /base_link /nav 100" />
    <node pkg="tf" type="static_transform_publisher" name="base_to_imu"
      args="0 0 0  0.0 0.0 0.0 /base_link /imu 100" />
    <node pkg="tf" type="static_transform_publisher"  name="base_to_camera"
      args="0.05 -0.03 0 -1.57070963 0 -1.5707963 /base_link /camera_rgb_optical_frame 100" />
    <node pkg="tf" type="static_transform_publisher" name="camera_to_depth"
      args="0 0 0.1 0.0 0 0.0 /camera_rgb_optical_frame /camera_depth_optical_frame 100" />

  #### Nodelet manager ######################################################

  <node pkg="nodelet" type="nodelet" name="imu_manager" 
    args="manager" output="screen" />

  #### IMU Driver ###########################################################

  <node pkg="nodelet" type="nodelet" name="PhidgetsImuNodelet" 
    args="load phidgets_imu/PhidgetsImuNodelet imu_manager" 
    output="screen">

    # supported data rates: 4 8 16 24 32 40 ... 1000 (in ms)
    <param name="period" value="32"/>

    # compass correction params (see http://www.phidgets.com/docs/1044_User_Guide)
         <param name="cc_mag_field" value="0.47180"/>
         <param name="cc_offset0" value="0.02748"/>
         <param name="cc_offset1" value="0.23093"/>
         <param name="cc_offset2" value="-0.02173"/>
         <param name="cc_gain0" value="2.15856"/>
         <param name="cc_gain1" value="2.00933"/>
         <param name="cc_gain2" value="2.19067"/>
         <param name="cc_t0" value="0.06483"/>
         <param name="cc_t1" value="-0.10713"/>
         <param name="cc_t2" value="-0.05131 "/>
         <param name="cc_t3" value="-0.15245"/>
         <param name="cc_t4" value="-0.08008"/>
         <param name="cc_t5" value="-0.13967"/>
  </node>

  #### IMU Orientation Filter ###############################################

  <node pkg="nodelet" type="nodelet" name="ImuFilterNodelet" 
    args="load imu_filter_madgwick/ImuFilterNodelet imu_manager" 
    output="screen">

    <param name="use_mag" value="true"/>
    <param name="world_frame" value="nwu"/>


  </node>


 <!-- "camera" should be a user friendly string to uniquely identify the device namespace.
       All topics are pushed down into the "camera" namespace, and it is prepended to tf frame ids. -->
  <arg name="camera"          default="camera" />

  <!-- Type of RealSense camera -->
  <arg name="camera_type"     default="R200" />

  <!-- "serial_no" or "usb_port_id" should be a unique identifier to connect to a device -->
  <arg name="serial_no"     default="" />
  <arg name="usb_port_id"   default="" /> <!-- USB "Bus#-Port#" -->

  <!-- Best know configuration for generating depth registered point cloud. -->
  <arg name="mode"            default="manual" />
  <arg name="color_width"     default="640" />
  <arg name="color_height"    default="480" />
  <arg name="depth_width"     default="640" />
  <arg name="depth_height"    default="480" />
  <arg name="depth_fps"       default="60" />
  <arg name="color_fps"       default="60" />

  <!-- Arguments for remapping all device namespaces -->
  <arg name="depth"            default="depth" />
  <arg name="rgb"              default="rgb" />
  <arg name="ir"               default="ir" />
  <arg name="depth_registered" default="depth_registered" />
  <arg name="projector"        default="projector" />

  <!-- Size of message queue for synchronizing subscribed topics in depth_image_proc package.
       Increase this value for higher resolution and/or frame rates.
       If the depth_registered pointcloud topic generated by the depth_image_proc package does not contain data,
       increase this value further. -->
  <arg name="queue_size"       default="100" />
  <param name="$(arg camera)/points_xyzrgb_sw_registered/queue_size" type="int" value="$(arg queue_size)" />

  <!-- Optionally suppress loading the driver nodelet. Useful while playing back recorded raw data from a bag.-->
  <arg name="load_driver"   default="true" />
  <arg name="publish_tf"    default="true" />

  <!-- Processing Modules -->
  <arg name="rgb_processing"                  default="true"/>
  <arg name="ir_processing"                   default="true"/>
  <arg name="depth_processing"                default="true"/>
  <arg name="depth_registered_processing"     default="true"/>
  <arg name="disparity_processing"            default="true"/>
  <arg name="disparity_registered_processing" default="true"/>
  <arg name="hw_registered_processing"        default="false" />
  <arg name="sw_registered_processing"        default="true" />

  <!-- Disable respawn topics by default -->
  <arg name="respawn" default="false" />

  <!-- Worker threads for the nodelet manager -->
  <arg name="num_worker_threads" default="4" />

  <!-- Push down all topics/nodelets into "camera" namespace -->
  <group ns="$(arg camera)">

    <!-- Start nodelet manager in provided namespace -->
    <arg name="manager" value="$(arg camera)_nodelet_manager" />
    <arg name="debug" default="false" /> <!-- Run manager in GDB? -->
    <include file="$(find rgbd_launch)/launch/includes/manager.launch.xml">
      <arg name="name"                value="$(arg manager)" />
      <arg name="debug"               value="$(arg debug)" />
      <arg name="num_worker_threads"  value="$(arg num_worker_threads)" />
    </include>

    <!-- Load driver -->
    <include if="$(arg load_driver)"
             file="$(find realsense_camera)/launch/includes/nodelet_rgbd.launch.xml">
      <arg name="manager"                   value="$(arg manager)" />
      <arg name="camera"                    value="$(arg camera)" />
      <arg name="camera_type"               value="$(arg camera_type)" />
      <arg name="serial_no"                 value="$(arg serial_no)" />
      <arg name="usb_port_id"               value="$(arg usb_port_id)" />
      <arg name="depth"                     value="$(arg depth)" />
      <arg name="rgb"                       value="$(arg rgb)" />
      <arg name="ir"                        value="$(arg ir)" />
      <arg name="depth_processing"          value="$(arg depth_processing)" />
      <arg name="rgb_processing"            value="$(arg rgb_processing)" />
      <arg name="ir_processing"             value="$(arg ir_processing)" />
      <arg name="publish_tf"                value="$(arg publish_tf)" />
      <arg name="mode"                      value="$(arg mode)" />
      <arg name="depth_width"               value="$(arg depth_width)" />
      <arg name="depth_height"              value="$(arg depth_height)" />
      <arg name="color_width"               value="$(arg color_width)" />
      <arg name="color_height"              value="$(arg color_height)" />
      <arg name="depth_fps"                 value="$(arg depth_fps)" />
      <arg name="color_fps"                 value="$(arg color_fps)" />
    </include>

    <!-- Load standard constellation of processing nodelets -->
    <include file="$(find rgbd_launch)/launch/includes/processing.launch.xml">
      <arg name="manager"                         value="$(arg manager)" />
      <arg name="rgb"                             value="$(arg rgb)" />
      <arg name="ir"                              value="$(arg ir)" />
      <arg name="depth"                           value="$(arg depth)" />
      <arg name="depth_registered"                value="$(arg depth_registered)" />
      <arg name="projector"                       value="$(arg projector)" />
      <arg name="respawn"                         value="$(arg respawn)" />
      <arg name="rgb_processing"                  value="$(arg rgb_processing)" />
      <arg name="ir_processing"                   value="$(arg ir_processing)" />
      <arg name="depth_processing"                value="$(arg depth_processing)" />
      <arg name="depth_registered_processing"     value="$(arg depth_registered_processing)" />
      <arg name="disparity_processing"            value="$(arg disparity_processing)" />
      <arg name="disparity_registered_processing" value="$(arg disparity_registered_processing)" />
      <arg name="hw_registered_processing"        value="$(arg hw_registered_processing)" />
      <arg name="sw_registered_processing"        value="$(arg sw_registered_processing)" />
    </include>

  </group> <!-- camera -->

<!-- Backward compatibility launch file, use rtabmap.launch instead -->
  
  <!-- Your RGB-D sensor should be already started with "depth_registration:=true".
        Examples:
           $ roslaunch freenect_launch freenect.launch depth_registration:=true 
           $ roslaunch openni2_launch openni2.launch depth_registration:=true -->
 
  <!-- Choose visualization -->
  <arg name="rviz"                    default="true" />
  <arg name="rtabmapviz"              default="false" /> 
  
  <!-- Localization-only mode -->
  <arg name="localization"            default="false"/>
  
  <!-- Corresponding config files -->
  <arg name="rtabmapviz_cfg"          default="-d $(find rtabmap_ros)/launch/config/rgbd_gui.ini" />
  <arg name="rviz_cfg"                default="-d $(find eyerobot_description)/launch/config.rviz" />
  
  <arg name="frame_id"                default="base_link"/>   <!-- Fixed frame id, you may set "base_link" or "base_footprint" if they are published -->
  <arg name="database_path"           default="~/.ros/rtabmap.db"/>
  <arg name="rtabmap_args"            default="--delete_db_on_start"/>              <!-- delete_db_on_start, udebug -->
  <arg name="launch_prefix"           default=""/>              <!-- for debugging purpose, it fills launch-prefix tag of the nodes -->
  <arg name="approx_sync"             default="false"/>         <!-- if timestamps of the input topics are not synchronized -->
   
  <arg name="rgb_topic"               default="/camera/rgb/image_rect_color" />
  <arg name="depth_registered_topic"  default="/camera/depth/image_raw" />
  <arg name="camera_info_topic"       default="/camera/rgb/camera_info" />
  <arg name="compressed"              default="false"/>
   
  <arg name="subscribe_scan"          default="false"/>         <!-- Assuming 2D scan if set, rtabmap will do 3DoF mapping instead of 6DoF -->
  <arg name="scan_topic"              default="/scan"/>
  
  <arg name="subscribe_scan_cloud"    default="false"/>         <!-- Assuming 3D scan if set -->
  <arg name="scan_cloud_topic"        default="/scan_cloud"/>
  
  <arg name="visual_odometry"         default="true"/>          <!-- Generate visual odometry -->
  <arg name="odom_topic"              default="/odom"/>         <!-- Odometry topic used if visual_odometry is false -->
   
  <arg name="namespace"               default="rtabmap"/>
  <arg name="wait_for_transform"      default="0.2"/>
  
  <include file="$(find rtabmap_ros)/launch/rtabmap.launch">
    <arg name="rtabmapviz"              value="$(arg rtabmapviz)" /> 
    <arg name="rviz"                    value="$(arg rviz)" />
    <arg name="localization"            value="$(arg localization)"/>
    <arg name="gui_cfg"                 value="$(arg rtabmapviz_cfg)" />
    <arg name="rviz_cfg"                value="$(arg rviz_cfg)" />
  
    <arg name="frame_id"                value="$(arg frame_id)"/>
    <arg name="namespace"               value="$(arg namespace)"/>
    <arg name="database_path"           value="$(arg database_path)"/>
    <arg name="wait_for_transform"      value="$(arg wait_for_transform)"/>
    <arg name="rtabmap_args"            value="$(arg rtabmap_args)"/>  
    <arg name="launch_prefix"           value="$(arg launch_prefix)"/>          
    <arg name="approx_sync"             value="$(arg approx_sync)"/>

    <arg name="rgb_topic"               value="$(arg rgb_topic)" />
    <arg name="depth_topic"             value="$(arg depth_registered_topic)" />
    <arg name="camera_info_topic"       value="$(arg camera_info_topic)" />
    <arg name="compressed"              value="$(arg compressed)"/>                                                                                
   
    <arg name="subscribe_scan"          value="$(arg subscribe_scan)"/>
    <arg name="scan_topic"              value="$(arg scan_topic)"/>
  
    <arg name="subscribe_scan_cloud"    value="$(arg subscribe_scan_cloud)"/>
    <arg name="scan_cloud_topic"        value="$(arg scan_cloud_topic)"/>
   
    <arg name="visual_odometry"         value="$(arg visual_odometry)"/>          
    <arg name="odom_topic"              value="$(arg odom_topic)"/>         
    <arg name="odom_args"               value="$(arg rtabmap_args)"/>
  </include>

  <node name="rplidarNode"          pkg="rplidar_ros"  type="rplidarNode" output="screen">
  <param name="serial_port"         type="string" value="/dev/ttyUSB0"/>  
  <param name="serial_baudrate"     type="int"    value="115200"/>
  <param name="frame_id"            type="string" value="laser"/>
  <param name="inverted"            type="bool"   value="false"/>
  <param name="angle_compensate"    type="bool"   value="true"/>
  </node>



  <arg name="tf_map_scanmatch_transform_frame_name" default="scanmatcher_frame"/>
  <arg name="base_frame" default="base_link"/>
  <arg name="odom_frame" default="vo"/>
  <arg name="pub_map_odom_transform" default="true"/>
  <arg name="scan_subscriber_queue_size" default="5"/>
<!--  <arg name="scan_topic" default="scan"/> -->
  <arg name="map_size" default="2048"/>
  
 <node pkg="hector_mapping" type="hector_mapping" name="hector_mapping" output="screen">
    
    <!-- Frame names -->
    <param name="map_frame" value="map" />
    <param name="base_frame" value="$(arg base_frame)" />
    <param name="odom_frame" value="$(arg odom_frame)" />
    
    <!-- Tf use -->
    <param name="use_tf_scan_transformation" value="true"/>
    <param name="use_tf_pose_start_estimate" value="false"/>
    <param name="pub_map_odom_transform" value="$(arg pub_map_odom_transform)"/>
    
    <!-- Map size / start point -->
    <param name="map_resolution" value="0.050"/>
    <param name="map_size" value="$(arg map_size)"/>
    <param name="map_start_x" value="0.5"/>
    <param name="map_start_y" value="0.5" />
    <param name="map_multi_res_levels" value="2" />
    
    <!-- Map update parameters -->
    <param name="update_factor_free" value="0.4"/>
    <param name="update_factor_occupied" value="0.9" />    
    <param name="map_update_distance_thresh" value="0.4"/>
    <param name="map_update_angle_thresh" value="0.06" />
    <param name="laser_z_min_value" value = "-1.0" />
    <param name="laser_z_max_value" value = "1.0" />
    
    <!-- Advertising config --> 
    <param name="advertise_map_service" value="true"/>
    
    <param name="scan_subscriber_queue_size" value="$(arg scan_subscriber_queue_size)"/>
    <param name="scan_topic" value="$(arg scan_topic)"/>
    
    <!-- Debug parameters -->
    <!--
      <param name="output_timing" value="false"/>
      <param name="pub_drawings" value="true"/>
      <param name="pub_debug_output" value="true"/>
    -->
    <param name="tf_map_scanmatch_transform_frame_name" value="$(arg tf_map_scanmatch_transform_frame_name)" />
  </node>



<node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
  <param name="output_frame" value="odom_combined"/>
  <param name="base_footprint_frame" value="base_footprint"/>
  <param name="freq" value="30.0"/>
  <param name="sensor_timeout" value="1.0"/>  
  <param name="odom_used" value="false"/>
  <param name="imu_used" value="true"/>
  <param name="vo_used" value="true"/>

  <remap from="vo" to="/rtabmap/odom" />
  <remap from="imu_data" to="imu/data" />
</node>




</launch>
